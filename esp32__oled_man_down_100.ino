#include <BluetoothSerial.h>
#include <BTAddress.h>
#include <BTAdvertisedDevice.h>
#include <BTScan.h>
#include <Wire.h>
#include "SSD1306.h"

SSD1306 display(0x3c, 21, 22);//生成对象display
BluetoothSerial SerialBT;//生成对象SerialBT;
const uint8_t top1[] =
{
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00,
  0xFF, 0x04, 0x40, 0x11, 0x80, 0x00, 0x42, 0x10, 0x04, 0x00, 0x00, 0xA0, 0x00, 0x08, 0x03, 0xFF,
  0xFF, 0x4A, 0xA0, 0x2A, 0x44, 0x81, 0xA5, 0x2A, 0x4A, 0xAC, 0x80, 0xB3, 0xE0, 0x95, 0xFA, 0xFF,
  0xFF, 0xA9, 0x16, 0x44, 0x3A, 0xA2, 0x28, 0xA5, 0xAA, 0x24, 0x87, 0x1C, 0x39, 0x65, 0x84, 0xFF,
  0xFF, 0x10, 0x09, 0x80, 0x01, 0x5C, 0x10, 0x40, 0x91, 0x17, 0xC8, 0x04, 0x07, 0x02, 0x80, 0xFF,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x70, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
}; //顶部磁条1
const uint8_t top2[] =
{
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0xFF, 0x0C, 0x03, 0x0D, 0x20, 0x00, 0x00, 0x00, 0xE0, 0x01, 0x00, 0x02, 0x00, 0x00, 0x0E, 0xFF,
  0xFF, 0x9E, 0x06, 0x0C, 0x20, 0x9E, 0xC0, 0x00, 0x20, 0x83, 0x07, 0xFD, 0x01, 0x1C, 0xFB, 0xFF,
  0xFF, 0x93, 0xFC, 0x4E, 0xE0, 0xB1, 0xEF, 0x0F, 0x18, 0x86, 0xC4, 0x01, 0x06, 0xB2, 0xE1, 0xFF,
  0xFF, 0x70, 0x88, 0xCB, 0x3F, 0xE0, 0x38, 0x38, 0x06, 0x6C, 0x38, 0x00, 0xFC, 0xE1, 0x80, 0xFF,
  0x00, 0x00, 0x00, 0x38, 0x00, 0x00, 0x00, 0xE0, 0x03, 0x38, 0x00, 0x00, 0x00, 0x60, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00,
}; //顶部磁条2
const uint8_t top3[] =
{
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x60, 0x00, 0x00,
  0xFF, 0x08, 0xE0, 0x03, 0x00, 0x00, 0x38, 0xF0, 0x01, 0x00, 0x06, 0x3E, 0x00, 0x50, 0x00, 0xFF,
  0xFF, 0x19, 0x30, 0x86, 0x01, 0xF8, 0x6F, 0x10, 0xF3, 0x03, 0x1D, 0x63, 0x03, 0x58, 0xF0, 0xFF,
  0xFF, 0x7B, 0x10, 0xC4, 0x03, 0x08, 0xC6, 0x0F, 0x1E, 0x83, 0xF1, 0xC1, 0x1F, 0x88, 0xFF, 0xFF,
  0xFF, 0x8E, 0x1F, 0xCC, 0x0C, 0x04, 0x90, 0x01, 0x06, 0x7F, 0x00, 0x80, 0x71, 0x0C, 0x80, 0xFF,
  0x00, 0x00, 0x00, 0x78, 0x70, 0x03, 0x00, 0x00, 0x00, 0x03, 0x00, 0x80, 0x81, 0x03, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x80, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00,
}; //顶部磁条3
const uint8_t white[] =
{
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x80, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC0, 0x04, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x60, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xB0, 0x03, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFC, 0x08, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x87, 0x03, 0x00, 0x00, 0x00, 0x00, 0x70, 0xC0, 0x00, 0x0E, 0x00, 0x00, 0x00,
  0x00, 0xF8, 0x60, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0xA8, 0x37, 0x00, 0x30, 0x00, 0x00, 0x00,
  0x00, 0x38, 0x1C, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x60, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x08, 0xF8, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0xF8, 0xFF, 0x01, 0x00, 0x00,
  0x00, 0x00, 0x0C, 0xC2, 0xFF, 0x07, 0x00, 0x00, 0x00, 0x00, 0x8C, 0x01, 0xFF, 0x0F, 0x00, 0x00,
  0x00, 0x00, 0x6C, 0x00, 0xFE, 0x3F, 0x00, 0x00, 0x00, 0x00, 0x38, 0x00, 0xFC, 0x7F, 0x00, 0x00,
  0x00, 0x00, 0x18, 0x00, 0xF8, 0xFF, 0x38, 0x00, 0x00, 0x00, 0x0C, 0x00, 0xF0, 0xFF, 0x60, 0x00,
  0x00, 0x00, 0x06, 0x00, 0xE0, 0xFF, 0xC1, 0x00, 0x00, 0x00, 0x02, 0x00, 0xC0, 0xFF, 0x83, 0x01,
  0x00, 0x00, 0x03, 0x80, 0x83, 0xFF, 0x83, 0x01, 0x00, 0x80, 0x01, 0xE7, 0x87, 0xFF, 0x07, 0x00,
  0x00, 0x80, 0x00, 0x01, 0x06, 0xFF, 0x07, 0x00, 0x00, 0xC0, 0x00, 0x03, 0x03, 0xFF, 0x0F, 0x00,
  0x00, 0x50, 0x00, 0x03, 0x01, 0xFF, 0x0F, 0x00, 0x00, 0x4E, 0x80, 0x01, 0x07, 0xFE, 0x0F, 0x00,
  0x00, 0x43, 0x80, 0x00, 0x04, 0xFE, 0x0F, 0x00, 0x00, 0x41, 0x00, 0x01, 0x04, 0xFE, 0x0F, 0x00,
  0x80, 0x61, 0x00, 0xC3, 0x07, 0xFE, 0x1F, 0x00, 0x00, 0x60, 0x00, 0x66, 0x00, 0xFC, 0x9F, 0x00,
  0x00, 0x60, 0x00, 0x24, 0x00, 0xFC, 0x1F, 0x03, 0x00, 0x60, 0x00, 0x36, 0x00, 0xFC, 0x1F, 0x06,
  0x00, 0x60, 0x00, 0x1E, 0x00, 0xFC, 0x1F, 0x04, 0x00, 0x40, 0x00, 0x0C, 0x10, 0xFC, 0x1F, 0x00,
  0x00, 0x40, 0x00, 0x00, 0x7C, 0xFC, 0x1F, 0x00, 0x00, 0x50, 0x00, 0x00, 0x63, 0xFC, 0x1F, 0x00,
  0x00, 0x58, 0x00, 0x00, 0x61, 0xFC, 0x1F, 0x00, 0x00, 0xCC, 0x00, 0x60, 0x20, 0xFC, 0x1F, 0x00,
  0x00, 0x84, 0x00, 0x30, 0x60, 0xFC, 0x1F, 0x00, 0x00, 0x84, 0x00, 0x18, 0x40, 0xFC, 0x1F, 0x00,
  0x00, 0x84, 0x01, 0x08, 0x40, 0xFC, 0x0F, 0x00, 0x00, 0x04, 0x01, 0x18, 0x40, 0xFE, 0x0F, 0x00,
  0x00, 0x00, 0x03, 0x20, 0x60, 0xFE, 0x07, 0x00, 0x00, 0x00, 0x02, 0x20, 0x20, 0xFE, 0x07, 0x01,
  0x00, 0x00, 0x06, 0x20, 0x2C, 0xFF, 0x07, 0x02, 0x00, 0x00, 0x0C, 0x30, 0x2C, 0xFF, 0x03, 0x06,
  0x00, 0x00, 0x08, 0x10, 0xBE, 0xFF, 0x03, 0x04, 0x00, 0x00, 0x18, 0x10, 0x82, 0xFF, 0x01, 0x00,
  0x00, 0x00, 0x30, 0xF0, 0xC3, 0xFF, 0x00, 0x00, 0x00, 0x00, 0xC0, 0x30, 0xC0, 0xFF, 0x00, 0x00,
  0x00, 0x00, 0x84, 0x03, 0xE0, 0x3F, 0x00, 0x00, 0x00, 0x00, 0x04, 0x3E, 0xF0, 0x1F, 0x00, 0x00,
  0x00, 0x00, 0x06, 0xF0, 0xFB, 0x07, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0xFE, 0x01, 0x00, 0x00,
  0x00, 0x00, 0x02, 0x80, 0x3F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
};//专属图片
const uint8_t player[] = { /* player img 8X8 */

  0x7E, 0x5A, 0x7E, 0x3C, 0x7E, 0x3C, 0x66, 0x66,
};

const uint8_t cloud[] = //32*16
{
  0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x80, 0x72, 0x1E, 0x00, 0xC0, 0x8C, 0x33, 0x00,
  0x30, 0x88, 0xE1, 0x03, 0x18, 0x88, 0x31, 0x06, 0x08, 0x80, 0x30, 0x04, 0x08, 0x00, 0x18, 0x04,
  0x08, 0x00, 0x00, 0x08, 0xB8, 0x3A, 0x10, 0x08, 0x50, 0x4D, 0xAD, 0x0A, 0xF0, 0xBE, 0x6A, 0x0D,
  0xC0, 0xF3, 0xF5, 0x07, 0x00, 0x00, 0x1A, 0x00, 0x00, 0x00, 0x0C, 0x00, 0x00, 0x00, 0x00, 0x00,
};
int counter;
int top_num, top_num_copy;
int player_x, player_y;
int cloud_x1, cloud_x2, cloud_x3, cloud_x4, cloud_x5, cloud_y, cloud_x_copy;
char blue_message;
const uint8_t *top[] = {top1, top2, top3};//数组存储顶部磁条的三张图片
void screen_refresh()
{
  top_num = top_num_copy = 0;
  //初始位置
  player_x = 60;
  player_y = 15;
  cloud_x1 = 48;
  cloud_y = 21;
  counter = 0;
  //蓝牙接受判定
  if (SerialBT.available() > 0)
    blue_message = SerialBT.read();
  if (blue_message == 'B')
  {
    while (1)
    {
      /*人物顶端触碰判定*/
      if (player_y == 4 || player_y >= 64)
      {
        display.clear();
        while (1)
        {
          display.drawString(38, 26, "Game Over");
          display.display();
        }
      }
      /*人物顶端触碰判定*/

      /*蓝牙模拟按键控制*/
      if (SerialBT.available() > 0)
        blue_message = SerialBT.read();
      if (blue_message == 'L') {
        player_x = player_x - 4;
      }
      else if (blue_message == 'R') {
        player_x = player_x + 4;
      }
      delay(20);
      /*蓝牙模拟按键控制*/
      if ((player_y <= cloud_y - 1) && (player_y >= cloud_y - 6) && ((player_x >= cloud_x1) && (player_x <= cloud_x1 + 31)))
      {
        player_y = cloud_y - 6;
        screen_up();
      }
      else if ((player_y <= cloud_y + 12) && (player_y >= cloud_y + 7) && ((player_x >= cloud_x2) && (player_x <= cloud_x2 + 31)))
      {
        player_y = cloud_y + 7;
        screen_up();
      }
      else if ((player_y <= cloud_y + 25) && (player_y >= cloud_y + 20) && ((player_x >= cloud_x3) && (player_x <= cloud_x3 + 31)))
      {
        player_y = cloud_y + 20;
        screen_up();
      }
      else if ((player_y <= cloud_y + 38) && (player_y >= cloud_y + 33) && ((player_x >= cloud_x4) && (player_x <= cloud_x4 + 31)))
      {
        player_y = cloud_y + 33;
        screen_up();
      }
      else if ((player_y <= cloud_y + 51) && (player_y >= cloud_y + 46) && ((player_x >= cloud_x5) && (player_x <= cloud_x5 + 31)))
      {
        player_y = cloud_y + 46;
        screen_up();
      }
      else
        screen_down();

    }
  }
}

void screen_up()//人在云上时的屏幕刷新显示
{
  /*顶部磁条*/
  top_num_copy = top_num;
  for (; top_num == top_num_copy;)
  {
    top_num = random(0, 2);
  }
  display.drawXbm(0, 0, 128, 8, top[top_num]);
  /*顶部磁条*/


  /*人*/
  display.drawXbm(player_x, player_y, 8, 8, player);
  /*人*/


  /*云*/
  if (counter == 0)//第一次运行
  {
    display.drawXbm(cloud_x1, cloud_y, 32, 16, cloud);
    cloud_x_copy = cloud_x1;
    while (abs(cloud_x1 - cloud_x_copy) <= 32)
    {
      cloud_x_copy = random(0, 96);
    }
    cloud_x2 = cloud_x_copy;
    display.drawXbm(cloud_x2, cloud_y + 13, 32, 16, cloud);
    while (abs(cloud_x2 - cloud_x_copy) <= 32)
    {
      cloud_x_copy = random(0, 96);
    }
    cloud_x3 = cloud_x_copy;
    display.drawXbm(cloud_x3, cloud_y + 26, 32, 16, cloud);
    while (abs(cloud_x3 - cloud_x_copy) <= 32)
    {
      cloud_x_copy = random(0, 96);
    }
    cloud_x4 = cloud_x_copy;
    display.drawXbm(cloud_x4, cloud_y + 39, 32, 16, cloud);
    while (abs(cloud_x4 - cloud_x_copy) <= 32)
    {
      cloud_x_copy = random(0, 96);
    }
    cloud_x5 = cloud_x_copy;
    display.drawXbm(cloud_x5, cloud_y + 52, 32, 16, cloud);
    counter = 1;
  }
  else//不是第一次运行
  {
    if (cloud_y + 13 == 24)
    {
      cloud_y = 24;
      cloud_x1 = cloud_x2;
      cloud_x2 = cloud_x3;
      cloud_x3 = cloud_x4;
      cloud_x4 = cloud_x5;
      cloud_x_copy = cloud_x4;
      while (abs(cloud_x4 - cloud_x_copy) <= 32)
      {
        cloud_x_copy = random(0, 96);
      }
      cloud_x5 = cloud_x_copy;
      display.drawXbm(cloud_x1, cloud_y, 32, 16, cloud);
      display.drawXbm(cloud_x2, cloud_y + 13, 32, 16, cloud);
      display.drawXbm(cloud_x3, cloud_y + 26, 32, 16, cloud);
      display.drawXbm(cloud_x4, cloud_y + 39, 32, 16, cloud);
      display.drawXbm(cloud_x5, cloud_y + 52, 32, 16, cloud);
    }
    else
    {
      display.drawXbm(cloud_x1, cloud_y, 32, 16, cloud);
      display.drawXbm(cloud_x2, cloud_y + 13, 32, 16, cloud);
      display.drawXbm(cloud_x3, cloud_y + 26, 32, 16, cloud);
      display.drawXbm(cloud_x4, cloud_y + 39, 32, 16, cloud);
      display.drawXbm(cloud_x5, cloud_y + 52, 32, 16, cloud);
    }
  }
  /*云*/
  display.display();
  delay(200);
  display.clear();
  player_y--;
  cloud_y--;
}

void screen_down()//人不在云上时的屏幕刷新显示
{
  /*顶部磁条*/
  top_num_copy = top_num;
  for (; top_num == top_num_copy;)
  {
    top_num = random(0, 2);
  }
  display.drawXbm(0, 0, 128, 8, top[top_num]);
  /*顶部磁条*/

  /*人*/
  display.drawXbm(player_x, player_y, 8, 8, player);
  /*人*/


  /*云*/
  if (counter == 0)
  {
    display.drawXbm(cloud_x1, cloud_y, 32, 16, cloud);
    cloud_x_copy = cloud_x1;
    while (abs(cloud_x1 - cloud_x_copy) <= 32)
    {
      cloud_x_copy = random(0, 96);
    }
    cloud_x2 = cloud_x_copy;
    display.drawXbm(cloud_x2, cloud_y + 13, 32, 16, cloud);
    while (abs(cloud_x2 - cloud_x_copy) <= 32)
    {
      cloud_x_copy = random(0, 96);
    }
    cloud_x3 = cloud_x_copy;
    display.drawXbm(cloud_x3, cloud_y + 26, 32, 16, cloud);
    while (abs(cloud_x3 - cloud_x_copy) <= 32)
    {
      cloud_x_copy = random(0, 96);
    }
    cloud_x4 = cloud_x_copy;
    display.drawXbm(cloud_x4, cloud_y + 39, 32, 16, cloud);
    while (abs(cloud_x4 - cloud_x_copy) <= 32)
    {
      cloud_x_copy = random(0, 96);
    }
    cloud_x5 = cloud_x_copy;
    display.drawXbm(cloud_x5, cloud_y + 52, 32, 16, cloud);
    counter = 1;
  }
  else
  {
    if (cloud_y + 13 == 24)
    {
      cloud_y = 24;
      cloud_x1 = cloud_x2;
      cloud_x2 = cloud_x3;
      cloud_x3 = cloud_x4;
      cloud_x4 = cloud_x5;
      cloud_x_copy = cloud_x4;
      while (abs(cloud_x4 - cloud_x_copy) <= 32)
      {
        cloud_x_copy = random(0, 96);
      }
      cloud_x5 = cloud_x_copy;
      display.drawXbm(cloud_x1, cloud_y, 32, 16, cloud);
      display.drawXbm(cloud_x2, cloud_y + 13, 32, 16, cloud);
      display.drawXbm(cloud_x3, cloud_y + 26, 32, 16, cloud);
      display.drawXbm(cloud_x4, cloud_y + 39, 32, 16, cloud);
      display.drawXbm(cloud_x5, cloud_y + 52, 32, 16, cloud);
    }
    else
    {
      display.drawXbm(cloud_x1, cloud_y, 32, 16, cloud);
      display.drawXbm(cloud_x2, cloud_y + 13, 32, 16, cloud);
      display.drawXbm(cloud_x3, cloud_y + 26, 32, 16, cloud);
      display.drawXbm(cloud_x4, cloud_y + 39, 32, 16, cloud);
      display.drawXbm(cloud_x5, cloud_y + 52, 32, 16, cloud);
    }
  }
  /*云*/
  display.display();
  delay(200);
  display.clear();
  player_y = player_y + 6;
  cloud_y--;
}


void setup() {
  /*蓝牙初始化*/
  Serial.begin(115200);
  SerialBT.begin("ESP32test"); //蓝牙模块名称
  /*蓝牙初始化*/
  display.init();
  display.setFont(ArialMT_Plain_10);
  /*开局动画*/
  display.drawXbm(32, 0, 64, 64, white);
  display.display();
  delay(3000);
  display.clear();
  display.setFont(ArialMT_Plain_10);
  display.drawString(56, 10, "MAN");
  display.drawString(51, 26, "DOWN");
  display.drawString(58, 42, "100");
  display.display();
  delay(3000);
  display.clear();
  display.drawString(20, 26, "Developed By WSH");
  display.display();
  delay(3000);
  display.clear();
  display.drawString(20, 26, "Please enter OK");
  display.display();
  /*开局动画*/
}

void loop() {
  screen_refresh();
}
